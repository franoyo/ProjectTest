# Generated by Django 4.2.7 on 2023-11-22 14:55

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('prueba1', '0002_cita_estadocita_historiaclinica_mascota_producto_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Raza',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('descripcion', models.TextField()),
            ],
        ),
        migrations.RemoveField(
            model_name='cita',
            name='gender_pet',
        ),
        migrations.RemoveField(
            model_name='cita',
            name='race_pet',
        ),
        migrations.RemoveField(
            model_name='cita',
            name='species_pet',
        ),
        migrations.RemoveField(
            model_name='historiaclinica',
            name='gender_pet',
        ),
        migrations.RemoveField(
            model_name='historiaclinica',
            name='race_pet',
        ),
        migrations.RemoveField(
            model_name='historiaclinica',
            name='species_pet',
        ),
        migrations.RemoveField(
            model_name='mascota',
            name='gender',
        ),
        migrations.RemoveField(
            model_name='mascota',
            name='race',
        ),
        migrations.RemoveField(
            model_name='mascota',
            name='species',
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=30)),
                ('apellido', models.CharField(max_length=30)),
                ('documento', models.IntegerField()),
                ('direccion', models.CharField(max_length=100)),
                ('celular', models.IntegerField()),
                ('groups', models.ManyToManyField(related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
